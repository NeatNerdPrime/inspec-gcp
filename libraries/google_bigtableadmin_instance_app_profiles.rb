# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class BigtableadminInstanceAppProfiles < GcpResourceBase
  name 'google_bigtableadmin_instance_app_profiles'
  desc 'InstanceAppProfile plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:etags, field: :etag)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:multi_cluster_routing_use_anies, field: :multi_cluster_routing_use_any)
  filter_table_config.add(:single_cluster_routings, field: :single_cluster_routing)
  filter_table_config.add(:priorities, field: :priority)
  filter_table_config.add(:standard_isolations, field: :standard_isolation)
  filter_table_config.add(:data_boost_isolation_read_onlies, field: :data_boost_isolation_read_only)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('appProfiles')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'name' => ->(obj) { [:name, obj['name']] },
      'etag' => ->(obj) { [:etag, obj['etag']] },
      'description' => ->(obj) { [:description, obj['description']] },
      'multiClusterRoutingUseAny' => ->(obj) { [:multi_cluster_routing_use_any, GoogleInSpec::Bigtableadmin::Property::InstanceAppProfileMultiClusterRoutingUseAny.new(obj['multiClusterRoutingUseAny'], to_s)] },
      'singleClusterRouting' => ->(obj) { [:single_cluster_routing, GoogleInSpec::Bigtableadmin::Property::InstanceAppProfileSingleClusterRouting.new(obj['singleClusterRouting'], to_s)] },
      'priority' => ->(obj) { [:priority, obj['priority']] },
      'standardIsolation' => ->(obj) { [:standard_isolation, GoogleInSpec::Bigtableadmin::Property::InstanceAppProfileStandardIsolation.new(obj['standardIsolation'], to_s)] },
      'dataBoostIsolationReadOnly' => ->(obj) { [:data_boost_isolation_read_only, GoogleInSpec::Bigtableadmin::Property::InstanceAppProfileDataBoostIsolationReadOnly.new(obj['dataBoostIsolationReadOnly'], to_s)] },
    }
  end

  private

  def product_url(_ = nil)
    'https://bigtableadmin.googleapis.com/v2/'
  end

  def resource_base_url
    '{{parent}}/appProfiles'
  end
end
