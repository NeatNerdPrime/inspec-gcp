# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class BigtableadminProjectInstanceClusterBackups < GcpResourceBase
  name 'google_bigtableadmin_project_instance_cluster_backups'
  desc 'ProjectInstanceClusterBackup plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:source_tables, field: :source_table)
  filter_table_config.add(:source_backups, field: :source_backup)
  filter_table_config.add(:expire_times, field: :expire_time)
  filter_table_config.add(:start_times, field: :start_time)
  filter_table_config.add(:end_times, field: :end_time)
  filter_table_config.add(:size_bytes, field: :size_bytes)
  filter_table_config.add(:states, field: :state)
  filter_table_config.add(:encryption_infos, field: :encryption_info)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('projectInstanceClusterBackups')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'name' => ->(obj) { [:name, obj['name']] },
      'sourceTable' => ->(obj) { [:source_table, obj['sourceTable']] },
      'sourceBackup' => ->(obj) { [:source_backup, obj['sourceBackup']] },
      'expireTime' => ->(obj) { [:expire_time, obj['expireTime']] },
      'startTime' => ->(obj) { [:start_time, obj['startTime']] },
      'endTime' => ->(obj) { [:end_time, obj['endTime']] },
      'sizeBytes' => ->(obj) { [:size_bytes, obj['sizeBytes']] },
      'state' => ->(obj) { [:state, obj['state']] },
      'encryptionInfo' => ->(obj) { [:encryption_info, GoogleInSpec::Bigtableadmin::Property::ProjectInstanceClusterBackupEncryptionInfo.new(obj['encryptionInfo'], to_s)] },
    }
  end

  private

  def product_url(_ = nil)
    'https://bigtableadmin.googleapis.com//v2/'
  end

  def resource_base_url
    '{{+parent}}/backups'
  end
end
