# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/datalossprevention/property/storedinfotype_dictionary'
require 'google/datalossprevention/property/storedinfotype_dictionary_cloud_storage_path'
require 'google/datalossprevention/property/storedinfotype_dictionary_word_list'
require 'google/datalossprevention/property/storedinfotype_large_custom_dictionary'
require 'google/datalossprevention/property/storedinfotype_large_custom_dictionary_big_query_field'
require 'google/datalossprevention/property/storedinfotype_large_custom_dictionary_big_query_field_field'
require 'google/datalossprevention/property/storedinfotype_large_custom_dictionary_big_query_field_table'
require 'google/datalossprevention/property/storedinfotype_large_custom_dictionary_cloud_storage_file_set'
require 'google/datalossprevention/property/storedinfotype_large_custom_dictionary_output_path'
require 'google/datalossprevention/property/storedinfotype_regex'

# A provider to manage Data loss prevention resources.
class DataLossPreventionStoredInfoType < GcpResourceBase
  name 'google_data_loss_prevention_stored_info_type'
  desc 'StoredInfoType'
  supports platform: 'gcp'

  attr_reader :params
  attr_reader :name
  attr_reader :description
  attr_reader :display_name
  attr_reader :regex
  attr_reader :dictionary
  attr_reader :large_custom_dictionary
  attr_reader :parent

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url(params[:beta]), resource_base_url, params, 'Get')
    parse unless @fetched.nil?
  end

  def parse
    @name = @fetched['name']
    @description = @fetched['description']
    @display_name = @fetched['displayName']
    @regex = GoogleInSpec::DataLossPrevention::Property::StoredInfoTypeRegex.new(@fetched['regex'], to_s)
    @dictionary = GoogleInSpec::DataLossPrevention::Property::StoredInfoTypeDictionary.new(@fetched['dictionary'], to_s)
    @large_custom_dictionary = GoogleInSpec::DataLossPrevention::Property::StoredInfoTypeLargeCustomDictionary.new(@fetched['largeCustomDictionary'], to_s)
    @parent = @fetched['parent']
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "StoredInfoType #{@params[:name]}"
  end

  private

  def product_url(_ = nil)
    'https://dlp.googleapis.com/v2/'
  end

  def resource_base_url
    '{{parent}}/storedInfoTypes/{{name}}'
  end
end
